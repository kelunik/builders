#!/usr/bin/env php
<?php

use Kelunik\Builders\BuilderGenerator;
use Roave\BetterReflection\BetterReflection;
use Roave\BetterReflection\Reflector\ClassReflector;
use Roave\BetterReflection\SourceLocator\Type\AggregateSourceLocator;
use Roave\BetterReflection\SourceLocator\Type\ComposerSourceLocator;
use Roave\BetterReflection\SourceLocator\Type\DirectoriesSourceLocator;

$rootPath = '';

$classLoader = (static function () use (&$rootPath) {
    if (file_exists(dirname(__DIR__, 3) . '/autoload.php')) {
        $autoloadPath = dirname(__DIR__, 3) . '/autoload.php';
        $rootPath = dirname(__DIR__, 4);
    } elseif (file_exists(dirname(__DIR__) . '/vendor/autoload.php')) {
        $autoloadPath = dirname(__DIR__) . '/vendor/autoload.php';
        $rootPath = dirname(__DIR__);
    } else {
        fwrite(STDERR, 'Could not locate autoload.php' . PHP_EOL);
        exit(1);
    }

    /** @noinspection PhpIncludeInspection */
    return require $autoloadPath;
})();

if ($argc !== 4) {
    fwrite(STDERR, "Usage: builder-generator App\\Value src src-generated" . PHP_EOL);
    fwrite(STDERR, "                         \-- Namespace" . PHP_EOL);
    fwrite(STDERR, "                                    \-- Value namespace" . PHP_EOL);
    fwrite(STDERR, "                                               \-- Directory" . PHP_EOL);
    exit(1);
}

[, $rootNamespace, $sourceDirectory, $targetDirectory] = $argv;

$sourceDirectory = $rootPath . DIRECTORY_SEPARATOR . $sourceDirectory;
$targetDirectory = $rootPath . DIRECTORY_SEPARATOR . $targetDirectory;

$betterReflection = new BetterReflection;
$astLocator = $betterReflection->astLocator();

$directoriesSourceLocator = new DirectoriesSourceLocator([$sourceDirectory], $astLocator);
$sourceLocator = new AggregateSourceLocator([
    $directoriesSourceLocator,
    new ComposerSourceLocator($classLoader, $astLocator),
]);

$reflector = new ClassReflector($sourceLocator);
$classes = $reflector->getAllClasses();

foreach ($classes as $class) {
    if (\strpos($class->getName(), $rootNamespace) !== 0) {
        continue;
    }

    $builderGenerator = new BuilderGenerator($class);
    if (!$builderGenerator->shouldGenerateBuilder()) {
        continue;
    }

    $source = $builderGenerator->generate();

    $splitName = \explode('\\', $builderGenerator->getBuilderName());
    $simpleName = \array_slice($splitName, -1)[0];
    $namespace = \implode('\\', \array_slice($splitName, 0, -1));

    if (\strpos($class->getFileName(), $sourceDirectory) !== 0) {
        throw new \RuntimeException('File "' . $class->getFileName() . '" is not within "' . $sourceDirectory . '"');
    }

    $targetPath = \dirname($targetDirectory . \substr($class->getFileName(), \strlen($sourceDirectory)));
    $targetFile = $targetPath . \DIRECTORY_SEPARATOR . $simpleName . '.php';

    if (!\is_dir($targetPath) && !\mkdir($targetPath, 0775, true) && !\is_dir($targetPath)) {
        throw new \RuntimeException(sprintf('Directory "%s" was not created', $targetPath));
    }

    \file_put_contents($targetFile, $source);
}